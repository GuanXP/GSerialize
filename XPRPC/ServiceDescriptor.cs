/*
 * Copyright 2020, Guan Xiaopeng
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
 
using System;
using System.Net;

namespace XPRPC
{
    /// <summary>
    /// Descroptor to define service information to clients
    /// </summary>
    [Serializable]
    public sealed class ServiceDescriptor
    {
        /// <summary>
        /// Service name that is the unique key in ServiceManager
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// interface name of the service
        /// </summary>
        public string InterfaceName { get; set; }

        /// <summary>
        /// Description about the service
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Host name where the service is running
        /// </summary>
        public string ServiceHost {get; set;}
        /// <summary>
        /// TCP port on which the service is listening
        /// </summary>
        public int ServicePort { get; set; }

        /// <summary>
        /// indicate if user SSL to transfer data
        /// </summary>
        public bool UseSSL {get; set;} = false;

        /// <summary>
        /// Security token to authorize the client if it can access the service.
        /// This token is generated by service and supplied to client by ServiceManager.
        /// </summary>
        public string AccessToken { get; set; }

        public override string ToString()
        {
            return $"{Name}<{InterfaceName}>@{ServiceHost}:{ServicePort}";
        }

        /// <summary>
        /// Check if two instances of ServiceDescriptor are identify
        /// </summary>
        public bool IsIdentityWith(ServiceDescriptor other)
        {
            return this.ToString() == other.ToString();
        }
    }
}

